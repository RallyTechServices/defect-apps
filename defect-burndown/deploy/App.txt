<!DOCTYPE html>
<html>
<head>
    <title>Defect Burndown</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Feb 19 2016 13:51:03 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Feb 19 2016 13:51:03 GMT-0700 (MST)";
        var CHECKSUM = 2902358670;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("DefectBurndownCalculator",{
    extend: "Rally.data.lookback.calculator.TimeSeriesCalculator",

    getMetrics: function () {
        return [
            //{
            //    "field": "ObjectID",
            //    "as": "Count",
            //    "display": "line",
            //    "f": "count"
            //},
            {
                "field": "FormattedID",
                "as": "Defects",
                "f": "filteredCount",
                "filterField": "Severity",
                "filterValues": this.includeSeverity,
                "display": "column"
            }
        ];
    }
});

Ext.define('Rally.technicalservices.DefectsByFieldSettings',{
    singleton: true,

    getFields: function(settings){

        console.log('settings',settings);
        return [{
            xtype: 'rallyfieldvaluecombobox',
            name: 'includeStates',
            fieldLabel: 'Include States',
            multiSelect: true,
            model: settings.modelName,
            field: 'State'
        },{
            xtype: 'rallyfieldvaluecombobox',
            name: 'includeSeverity',
            fieldLabel: 'Include Severity',
            multiSelect: true,
            model: settings.modelName,
            field: 'Severity'
        }];
    }
});

Ext.define("DefectBurndown", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    config: {
        defaultSettings: {
            includeStates: ['Open', 'Submitted'],
            modelName: 'Defect',
            includeSeverity: ['Critical','Major Problem'],
            alwaysFetch: ['FormattedID','ObjectID','State','Severity','_ValidFrom','_ValidTo']
        }
    },

    integrationHeaders : {
        name : "DefectBurndown"
    },

    launch: function() {
        this._buildChart(this.getSettings());
    },
    _buildChart: function(settings){
        this.logger.log('_buildChart');
        this.removeAll();
        var startDate = Rally.util.DateTime.add(new Date(), 'day', -100),
            endDate = new Date(),
            storeConfig = this._getStoreConfig(settings, startDate, endDate);

        var includeSeverity = settings.includeSeverity;
        if (Ext.isString(includeSeverity)){
            includeSeverity = includeSeverity.split(',');
        }

        this.add({
            xtype: 'rallychart',
            storeType: 'Rally.data.lookback.SnapshotStore',
            storeConfig: storeConfig,
            calculatorType: 'DefectBurndownCalculator',
            calculatorConfig: {
                includeSeverity: includeSeverity,
                startDate: Rally.util.DateTime.toIsoString(startDate, true),
                endDate: Rally.util.DateTime.toIsoString(endDate, true)
            },
            chartConfig: this._getChartConfig()
        });

        //this.add({
        //    xtype: 'rallychart',
        //    loadMask: false,
        //    chartConfig: this._getChartConfig(),
        //    chartData: this._getChartData(records)
        //});

    },
    _getChartConfig: function(){
        return {
            chart: {
                defaultSeriesType: 'area',
                zoomType: 'xy'
            },
            title: {
                text: null
            },
            xAxis: {
                categories: [],
                tickmarkPlacement: 'on',
                tickInterval: 5,
                title: {
                    text: 'Date',
                    margin: 10
                }
            },
            yAxis: [
                {
                    title: {
                        text: 'Count'
                    }
                }
            ],
            tooltip: {
                formatter: function() {
                    return '' + this.x + '<br />' + this.series.name + ': ' + this.y;
                }
            },
            plotOptions: {
                series: {
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true
                            }
                        }
                    },
                    groupPadding: 0.01
                },
                column: {
                    stacking: null,
                    shadow: false
                }
            }
        };
    },
    _showError: function(msg){
        Rally.ui.notify.Notifier.showError(msg);
    },
    _getStoreConfig: function(settings, startDate, endDate){
        var fetch = settings.alwaysFetch;

        startDate = Rally.util.DateTime.toIsoString(startDate);
        endDate = Rally.util.DateTime.toIsoString(endDate);
        var includeStates = settings.includeStates;
        if (Ext.isString(includeStates)){
            includeStates = includeStates.split(',');
        }

        return {
            fetch: fetch,
            find: {
                _ProjectHierarchy: this.getContext().getProject().ObjectID,
                _TypeHierarchy: 'Defect',
                State: {$in: includeStates},
                _ValidTo: {$gte: startDate},
                _ValidFrom: {$lte: endDate}
            },
            hydrate: ["State","Severity"],
            limit: "Infinity",
            removeUnauthorizedSnapshots: true
        };

    },
    _fetchData: function(config){
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        Ext.create('Rally.data.lookback.SnapshotStore', config).load({
            callback: function(records, operation){
                me.logger.log('_fetchData', operation, records);
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });

        return deferred;
    },
    getSettingsFields: function(){
        return Rally.technicalservices.DefectsByFieldSettings.getFields(this.getSettings());
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },

    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },

    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this._buildChart(settings);

    }
});

            
               Rally.launchApp('DefectBurndown', {
                   name: 'Defect Burndown'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>